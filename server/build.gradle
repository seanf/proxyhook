plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

dependencies {
    compile project(':common')
    compile 'de.svenkubiak:jBCrypt:0.4.1'
}

mainClassName = 'io.vertx.core.Launcher'
def mainVerticleName = 'org.flanigan.proxyhook.server.ProxyHookServer'

// Vert.x watches for file changes in all subdirectories
// of src/ but only for files with .kt extension
// NB this won't pick up changes in :common
def watchForChange = 'src/**/*.kt'

// Vert.x will call this task on changes
def doOnChange = 'gradlew classes'

task runMain(type: JavaExec)

runMain {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.flanigan.proxyhook.server.HashPassword'
    args = []
}

//noinspection GroovyAssignabilityCheck
run {
    args = ['run', mainVerticleName]
//    args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

shadowJar {
    classifier = 'fat'

    manifest {
        attributes "Main-Verticle": mainVerticleName
    }

    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task tarball(type: Tar, dependsOn: [clean, shadowJar]) {
//    archiveName = 'build/server-deploy.tar.gz'
    baseName = 'server-deploy'
    destinationDir = file('build')
    extension = 'tar.gz'
    compression = Compression.GZIP
    into('repo/application') {
        from 'build/libs'
        // this wildcard is why we need a clean build (partly)
        include 'server-*-fat.jar'
    }
    into('/') {
        from 'src/openshift2'
    }
}

task enableBinaryDeployment(type: Exec) {
    doFirst {
        println "Configuring OpenShift app with name " +
            "${System.env.PROXYHOOK_APP} in namespace " +
            "${System.env.PROXYHOOK_NAMESPACE}"
        println commandLine.join(' ')
    }
    commandLine 'rhc', 'configure-app', System.env.PROXYHOOK_APP,
        '--namespace', System.env.PROXYHOOK_NAMESPACE, '--deployment-type',
        'binary'
    onlyIf {
        System.env.PROXYHOOK_NAMESPACE != null && System.env.PROXYHOOK_APP != null
    }
}

task deploy(type: Exec, dependsOn: [tarball, enableBinaryDeployment]) {
    doFirst {
        println "Deploying to OpenShift app with name " +
            "${System.env.PROXYHOOK_APP} in namespace " +
            "${System.env.PROXYHOOK_NAMESPACE}"
        println commandLine.join(' ')
    }
    commandLine 'rhc', 'deploy', '--app', System.env.PROXYHOOK_APP,
        '--namespace', System.env.PROXYHOOK_NAMESPACE, tarball.archivePath
    onlyIf {
        System.env.PROXYHOOK_NAMESPACE != null && System.env.PROXYHOOK_APP != null
    }
}
